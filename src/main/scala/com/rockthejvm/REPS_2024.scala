/*
We downloaded 3 different datasets for HydroPowerGeneration, WindPowerGeneration and SolarPowerGeneration from Fingrid. The file is in JSON format
*/

package com.rockthejvm

import scala.io.Source
import java.io.PrintWriter
import org.json4s._
import org.json4s.native.JsonMethods._

//First defining a case class to represent renewable energy data
case class RenewableEnergyData(datasetId: Int, startTime: String, endTime: String, value: Double)
object REPS_2024 extends App{


  /*
Use case 1: The system should be designed to monitor and control the power plant's renewable
energy sources, including solar panels, wind turbines, and hydropower.
 */

    /*
  Use case 2: The system should be capable of collecting data related to the energy generated by
  renewable sources and storing it in a file.
   */
  //This case just add all the energy values from JSON file and gives the total energy generated value on a given date.
    //Setting up JSON parsing
    implicit val formats: DefaultFormats.type = DefaultFormats

    //Creating a function to parse JSON data
    def parseJSONFile(filename: String): List[RenewableEnergyData] = {
      val jsonString = Source.fromFile(filename).getLines().mkString
      val json = parse(jsonString)
      json.extract[List[RenewableEnergyData]]
    }

    //Parsing data from JSON files
    val windEnergyData = parseJSONFile("WindPowerGeneration.json")
    val solarEnergyData = parseJSONFile("SolarPowerGeneration.json")
    val hydroEnergyData = parseJSONFile("HydroPowerGeneration.json")

    //Extracting data from the file
    val date = if (windEnergyData.nonEmpty) windEnergyData.head.startTime.substring(0,10) else "Not Known"

    //calculating total energy generation in a single day
    val totalWindEnergy = windEnergyData.map(_.value).sum
    val totalSolarEnergy = solarEnergyData.map(_.value).sum
    val totalHydroEnergy = hydroEnergyData.map(_.value).sum

    //Storing the energy generated in file name "EnergyGeneratedData.txt"
    //Defining the output file and writing allData to the output file
    val file = "EnergyGeneratedData.txt"
    val writer = new PrintWriter(file)

    try {
      writer.println(s"Wind Power Generation on $date")
      writer.println(s"Total wind energy: $totalWindEnergy MW")
      writer.println("---------------------------------------")

      writer.println(s"Solar Power Generation on $date")
      writer.println(s"Total solar energy: $totalSolarEnergy MW")
      writer.println("---------------------------------------")

      writer.println(s"Hydro Power Generation $date")
      writer.println(s"Total hydro energy: $totalHydroEnergy MW")
      writer.println("---------------------------------------")
    } finally {
      writer.close()
    }




    /*
  Use case 3: The system should provide a view of the power plant's energy generation and storage
  capacity, allowing operators to adjust the power plant's operation as needed. This
  view should show the data stored in the file.
   */

    /*
  Use case 4: The system should be able to analyse the data collected from renewable sources. It
  should be possible to filter the data on an hourly, daily, weekly and monthly basis. It
  should be possible to sort the data where possible. It must allow a user to search for
  required data stored in the system.
  Data Analysis should include: Mean, Median, Mode, Range, and Midrange

   */

    /*
  Use case 5:  The system should be able to detect and handle issues with renewable energy sources,
  such as low energy output, and equipment malfunction, generating alerts for the
  operators accordingly
   */

}
